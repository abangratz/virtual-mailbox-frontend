require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MailUsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET index" do
    it "assigns all users as @users" do
      @user = mock_model(User).as_null_object
      @transport = mock_model(Transport).as_null_object
      @transport.stub(:users).and_return([@user])
      Transport.should_receive(:get).with('x').and_return(@transport)
      get :index, :transport_id => 'x'
      assigns(:users).should eq([@user])
    end
  end

  describe "GET show" do
    it "assigns the requested user as @user" do
      @user = mock_model(User).as_null_object
      @transport = mock_model(Transport).as_null_object
      @transport.stub_chain(:users, :first).and_return(@user)
      Transport.should_receive(:get).with('x').and_return(@transport)
      get :show, :id => 'x', :transport_id => 'x'
      assigns(:user).should eq(@user)
    end
  end

  describe "GET new" do
    it "assigns a new user as @user" do
      @user = mock_model(User).as_null_object
      @transport = mock_model(Transport).as_null_object
      @transport.stub_chain(:users, :new).and_return(@user)
      Transport.should_receive(:get).with('x').and_return(@transport)
      get :new, :transport_id => 'x'
      assigns(:user).should eq(@user)
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      @user = mock_model(User).as_null_object
      @transport = mock_model(Transport).as_null_object
      @transport.stub_chain(:users, :first).and_return(@user)
      Transport.should_receive(:get).with('x').and_return(@transport)
      get :edit, :id => 'test', :transport_id => 'x'
      assigns(:user).should eq(@user)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      before(:each) do
        @user = mock_model(User).as_null_object
        @transport = mock_model(Transport).as_null_object
        @transport.stub_chain(:users, :new).and_return(@user)
        Transport.should_receive(:get).with('x').and_return(@transport)
        @user.stub(:save).and_return(true)
      end
      it "creates a new User" do
        post :create, :user => valid_attributes, :transport_id => 'x'
      end

      it "assigns a newly created user as @user" do
        post :create, :user => valid_attributes, :transport_id => 'x'
        assigns(:user).should == @user
      end

      it "redirects to the created user" do
        post :create, :user => valid_attributes, :transport_id => 'x'
        response.should redirect_to(transport_mail_user_url(@transport, @user))
      end
    end

    describe "with invalid params" do
      before(:each) do
        @user = mock_model(User).as_null_object
        @transport = mock_model(Transport).as_null_object
        @transport.stub_chain(:users, :new).and_return(@user)
        Transport.should_receive(:get).with('x').and_return(@transport)
        @user.stub(:save).and_return(false)
      end
      it "assigns a newly created but unsaved user as @user" do
        post :create, :user => {}, :transport_id => 'x'
        assigns(:user).should == @user
      end

      it "re-renders the 'new' template" do
        post :create, :user => {}, :transport_id => 'x'
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before(:each) do
        @transport = mock_model(Transport, :domain => 'x').as_null_object
        @user = mock_model(User, :transport => @transport, :id => 'test').as_null_object
        Transport.stub(:get).and_return(@transport)
        @transport.stub_chain(:users, :first => @user)
      end
      it "updates the requested user" do
        @user.should_receive(:update_attributes).with({'these' => 'params'}).and_return(true)
        put :update, :id =>'test', :user => {'these' => 'params'}, :transport_id => 'x'
      end

      it "assigns the requested user as @user" do
        @user.should_receive(:update_attributes).with({'these' => 'params'}).and_return(true)
        put :update, :id => 'test', :user => {'these' => 'params'}, :transport_id => 'x'
        assigns(:user).should eq(@user)
      end

      it "redirects to the user" do
        @user.should_receive(:update_attributes).with({'these' => 'params'}).and_return(true)
        put :update, :id => 'test', :user => {'these' => 'params'}, :transport_id => 'x'
        response.should redirect_to(transport_mail_user_url(@transport, @user))
      end
    end

    describe "with invalid params" do
      before(:each) do
        @transport = mock_model(Transport, :domain => 'x').as_null_object
        @user = mock_model(User, :transport => @transport).as_null_object
        Transport.stub(:get).and_return(@transport)
        @transport.stub_chain(:users, :first => @user)
        @user.stub(:update_attributes).and_return(false)
      end
      it "assigns the user as @user" do
        put :update, :id => 'test', :user => {}, :transport_id => 'x'
        assigns(:user).should eq(@user)
      end

      it "re-renders the 'edit' template" do
        put :update, :id => 'test', :user => {:transport_id => 'transport.com', :realname => 'Test User', :uid => '100101', :gid => '100101', :home => 'test'}, :transport_id => 'x'
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      user = mock_model(User).as_null_object
      User.should_receive(:get).with(1).and_return(user)
      user.should_receive(:destroy).and_return(true)
      delete :destroy, :id => 1, :transport_id => 'x'
    end

    it "redirects to the users list" do
      user = mock_model(User).as_null_object
      User.should_receive(:get).with(1).and_return(user)
      user.should_receive(:destroy).and_return(true)
      delete :destroy, :id => 1, :transport_id => 'x'
      response.should redirect_to(transport_mail_users_url(:transport_id => 'x'))
    end
  end

end
