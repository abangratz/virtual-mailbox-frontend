require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TransportsController do
  include Devise::TestHelpers
  before(:all) do
    @admin = Factory(:mail_admin)
  end

  before(:each) do
    sign_in @admin
  end
  after(:each) do
    sign_out @admin
  end

  # This should return the minimal set of attributes required to create a valid
  # Transport. As you add validations to Transport, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {'domain' => 'test.com', 'transport' => 'virtual:'}
  end

  describe "GET index" do
    it "assigns all transports as @transports" do
      transport = mock_model(Transport).as_null_object
      Transport.should_receive(:all).and_return([transport])
      get :index
      assigns(:transports).should eq([transport])
    end
  end

  describe "GET show" do
    it "assigns the requested transport as @transport" do
      transport = mock_model(Transport).as_null_object
      Transport.should_receive(:get).with('x').and_return(transport)
      get :show, :id => 'x'
      assigns(:transport).should eq(transport)
    end
  end

  describe "GET new" do
    it "assigns a new transport as @transport" do
      transport = mock_model(Transport).as_null_object
      Transport.stub(:new).and_return(transport)
      get :new
      assigns(:transport).should eq(transport)
    end
  end

  describe "GET edit" do
    it "assigns the requested transport as @transport" do
      transport = mock_model(Transport).as_null_object
      Transport.stub(:get).and_return(transport)
      get :edit, :id => 'x'
      assigns(:transport).should eq(transport)
    end
  end

  describe "POST create" do
    describe "with valid params" do

      before(:each) do
        @transport = mock_model(Transport).as_null_object
        Transport.stub(:new).and_return(@transport)
        @transport.stub(:save).and_return(true)
      end
      it "creates a new Transport" do
        Transport.should_receive(:new).with(valid_attributes).and_return(@transport)
        post :create, :transport => valid_attributes
      end

      it "assigns a newly created transport as @transport" do
        post :create, :transport => valid_attributes
        assigns(:transport).should eq(@transport)
      end

      it "redirects to the created transport" do
        post :create, :transport => valid_attributes
        response.should redirect_to(@transport)
      end
    end

    describe "with invalid params" do
      before(:each) do
        @transport = mock_model(Transport).as_null_object
        Transport.stub(:new).and_return(@transport)
        @transport.stub(:save).and_return(false)
      end
      it "assigns a newly created but unsaved transport as @transport" do
        post :create, :transport => {}
        assigns(:transport).should eq(@transport)
      end

      it "re-renders the 'new' template" do
        post :create, :transport => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before(:each) do
        @transport = mock_model(Transport).as_null_object
        Transport.stub(:get).and_return(@transport)
        @transport.stub(:update_attributes).and_return(true)
      end
      it "updates the requested transport" do
        Transport.should_receive(:get).with('x').and_return(@transport)
        @transport.should_receive(:update_attributes).with('these' => 'params').and_return(true)
        put :update, :id => 'x', :transport => {'these' => 'params'}
      end

      it "assigns the requested transport as @transport" do
        put :update, :id => 'x', :transport => valid_attributes
        assigns(:transport).should eq(@transport)
      end

      it "redirects to the transport" do
        put :update, :id => 'x', :transport => valid_attributes
        response.should redirect_to(@transport)
      end
    end

    describe "with invalid params" do
      before(:each) do
        @transport = mock_model(Transport).as_null_object
        Transport.stub(:get).and_return(@transport)
        @transport.stub(:update_attributes).and_return(false)
      end
      it "assigns the transport as @transport" do
        put :update, :id => 'x', :transport => {}
        assigns(:transport).should eq(@transport)
      end

      it "re-renders the 'edit' template" do
        put :update, :id => 'x', :transport => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested transport" do
      transport = mock_model(Transport).as_null_object 
      Transport.should_receive(:get).with('x').and_return(transport)
      transport.should_receive(:destroy).and_return(true)
      delete :destroy, :id => 'x'
    end

    it "redirects to the transports list" do
      transport = mock_model(Transport).as_null_object 
      Transport.stub(:get).and_return(transport)
      delete :destroy, :id => 'x'
      response.should redirect_to(transports_url)
    end
  end

end
